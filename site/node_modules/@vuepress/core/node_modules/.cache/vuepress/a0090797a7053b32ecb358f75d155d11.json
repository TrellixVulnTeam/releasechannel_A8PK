{"remainingRequest":"/mnt/c/Users/saman/Documents/repos/releasechannel/site/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/mnt/c/Users/saman/Documents/repos/releasechannel/site/node_modules/cache-loader/dist/cjs.js??ref--1-0!/mnt/c/Users/saman/Documents/repos/releasechannel/site/node_modules/vue-loader/lib/index.js??ref--1-1!/mnt/c/Users/saman/Documents/repos/releasechannel/site/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/mnt/c/Users/saman/Documents/repos/releasechannel/site/src/applications/Vue.md?vue&type=template&id=4b5c842a&","dependencies":[{"path":"/mnt/c/Users/saman/Documents/repos/releasechannel/site/src/applications/Vue.md","mtime":1621516333056},{"path":"/mnt/c/Users/saman/Documents/repos/releasechannel/site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/saman/Documents/repos/releasechannel/site/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/mnt/c/Users/saman/Documents/repos/releasechannel/site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/mnt/c/Users/saman/Documents/repos/releasechannel/site/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/mnt/c/Users/saman/Documents/repos/releasechannel/site/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}